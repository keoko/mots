#+title: Journal
* 2025
** 2025/Oct/28
*** fix: remove auto-focus behavior on Android to allow users to see keyboard feedback
Removed automatic keyboard focus on page load and after submitting guesses. Users now need to tap the grid to open the keyboard, which allows them to see the color-coded letter feedback (correct/present/absent) without the keyboard blocking the view.
*** feat: display app version in footer for easier version tracking
Added version display to the footer on both main page and help page. This helps users verify they're not using a stale cached version.
*** fix: limit mobile keyboard input to word length and sync with display to fix backspace behavior
The mobile keyboard allowed typing more letters than the word length, causing backspace to delete invisible characters instead of visible ones. Fixed by syncing the input field value to match the trimmed/displayed value.
*** refactor: remove diagnostic console.log statements and hide mobile keyboard input placeholder
Cleaned up all verbose console.log statements added during iOS keyboard debugging. Removed the "Type here..." placeholder and added aria-hidden to the mobile keyboard input for better UX.
*** fix: iOS keyboard now works by preventing global keydown handler from calling render()
The issue was that the global keydown listener in app.js was catching mobile keyboard events and calling render(), which destroyed the input element while typing. Fixed by ignoring events from mobile-keyboard-input in the global handler.
*** refactor: remove vibration/haptics API (Chrome-only, not widely supported)
*** fix: refactor service worker to remove ES6 imports and add error handling
*** refactor: replace help modal with dedicated help page for better mobile UX
*** refactor: remove welcome modal and simplify help modal for better mobile UX
** 2025/Oct/25
*** waste a lot of time troubleshooting why iphone keyboard does not work, still no clear answer
*** improve UX to understand the game
*** improve offline mode
it seems it crashes the service worker after refreshing the mage on mobile (airplane mode)
*** feat: add version tracking, enhanced keyboard, help modal, and offline-first PWA
*** feat: implement dynamic grid cell sizing
*** feat: add support for multi-word phrases with auto-spacing and visual separators
*** refactor: use ISO 639-1 language codes (ca/en) instead of full names (catalan/english)
*** feat: add native mobile keyboard support with clickable grid cells
** 2025/Oct/24
*** changed game UI like wordle
*** started looking into local first apps: local persistence
*** minor improvements
- favicon
** 2025/Oct/23
*** changed my mind and we will implement this game with vanilla JS. Why?
- no need of backend, I wanted to play with Erlang/Gleam but new there is no need.
- LLMs make a lot of mistakes with Gleam and Lustre (e.g. list.at, FFIs in Lustre, etc)
- prefer to explore more local first apps (e.g. web APIs, state sync, etc)
*** difficulties to improve UI with Claude Code
- wanted to fix some gaps, but it required several iterations and it didn't quite work
** 2025/Oct/22
*** word collections
*** word collections moved to JSON files
*** used FFI to fetch JSON files in JS
had some issues to understand where to place the FFI file, and also the mapping of function names
the FFI should be placed on src/ folder, and when building the app it is moved to the assets folder
** 2025/Oct/21
*** deploy with GH actions
Looks like there are some mistakes on the documentation.
https://hexdocs.pm/lustre/guide/04-spa-deployments.html

** 2025/Oct/19
*** chatgpt/claude makes mistakes when writing Gleam code like using list.at
list.at function does not exist in Erlang
*** erlang.get_line does not work
I used another package called input, but maybe it could work using external function erlang.get_line, not sure how it works
