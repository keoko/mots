name: Release & Deploy

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for proper version calculation

      - name: Calculate semantic version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE:)|!:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          change_path: "js css index.html"  # Only version if these paths changed
          bump_each_commit: true

      - name: Prepare deployment files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          GIT_COMMIT="${{ github.sha }}"
          GIT_COMMIT_SHORT="${GIT_COMMIT:0:7}"

          echo "Preparing deployment with version: v$VERSION (built: $BUILD_DATE, commit: $GIT_COMMIT_SHORT)"

          # Create build directory
          mkdir -p build

          # Copy all files except .git and .github
          rsync -av --exclude='.git' --exclude='.github' --exclude='build' --exclude='node_modules' ./ build/

          # Update version in js/version.js
          cat > build/js/version.js << EOF
          // version.js - App version and diagnostic information
          // This is the single source of truth for version information
          // Auto-generated by GitHub Actions - do not edit manually

          export const VERSION = {
            app: '$VERSION',
            buildDate: '$BUILD_DATE',
            gitCommit: '$GIT_COMMIT_SHORT'
          };

          // Generate cache name for service worker
          export function getCacheName() {
            return \`mots-v\${VERSION.app}\`;
          }

          // Get diagnostic information for troubleshooting
          export async function getDiagnosticInfo() {
            const info = {
              // Version info
              appVersion: VERSION.app,
              buildDate: VERSION.buildDate,
              gitCommit: VERSION.gitCommit,

              // Service Worker
              serviceWorkerActive: !!navigator.serviceWorker?.controller,
              serviceWorkerVersion: await getServiceWorkerVersion(),

              // Browser/Environment
              userAgent: navigator.userAgent,
              platform: navigator.platform,
              online: navigator.onLine,
              language: navigator.language,

              // Screen
              screenSize: \`\${window.screen.width}x\${window.screen.height}\`,
              viewportSize: \`\${window.innerWidth}x\${window.innerHeight}\`,

              // Storage
              storageEstimate: await getStorageEstimate(),

              // App state
              localStorageKeys: getLocalStorageInfo(),

              // Timestamp
              timestamp: new Date().toISOString()
            };

            return info;
          }

          // Get service worker version from cache name
          async function getServiceWorkerVersion() {
            try {
              if (!('caches' in window)) return 'Not supported';

              const cacheNames = await caches.keys();
              const motsCaches = cacheNames.filter(name => name.startsWith('mots-'));
              return motsCaches.length > 0 ? motsCaches[0] : 'No cache found';
            } catch (error) {
              return \`Error: \${error.message}\`;
            }
          }

          // Get storage usage estimate
          async function getStorageEstimate() {
            try {
              if (!navigator.storage?.estimate) return 'Not supported';

              const estimate = await navigator.storage.estimate();
              const usedMB = (estimate.usage / 1024 / 1024).toFixed(2);
              const quotaMB = (estimate.quota / 1024 / 1024).toFixed(2);

              return {
                used: \`\${usedMB} MB\`,
                quota: \`\${quotaMB} MB\`,
                percentage: \`\${((estimate.usage / estimate.quota) * 100).toFixed(1)}%\`
              };
            } catch (error) {
              return \`Error: \${error.message}\`;
            }
          }

          // Get localStorage info
          function getLocalStorageInfo() {
            try {
              const keys = Object.keys(localStorage);
              const motsKeys = keys.filter(k => k.startsWith('mots_'));

              return {
                total: keys.length,
                motsRelated: motsKeys.length,
                keys: motsKeys
              };
            } catch (error) {
              return \`Error: \${error.message}\`;
            }
          }

          // Format diagnostic info as readable text
          export function formatDiagnosticInfo(info) {
            return \`
          === Mots Diagnostic Info ===

          Version: \${info.appVersion}
          Build Date: \${info.buildDate}
          Git Commit: \${info.gitCommit}
          Service Worker: \${info.serviceWorkerActive ? 'Active' : 'Inactive'} (\${info.serviceWorkerVersion})

          Browser: \${info.userAgent}
          Platform: \${info.platform}
          Language: \${info.language}
          Online: \${info.online ? 'Yes' : 'No'}

          Screen: \${info.screenSize}
          Viewport: \${info.viewportSize}

          Storage Used: \${info.storageEstimate.used} / \${info.storageEstimate.quota} (\${info.storageEstimate.percentage})

          LocalStorage Keys: \${info.localStorageKeys.total} total, \${info.localStorageKeys.motsRelated} Mots-related
          Keys: \${info.localStorageKeys.keys.join(', ')}

          Generated: \${info.timestamp}
          \`.trim();
          }
          EOF

      - name: Create GitHub Release
        if: steps.version.outputs.changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version_tag }}
          name: Release ${{ steps.version.outputs.version_tag }}
          generateReleaseNotes: true
          skipIfReleaseExists: true
          body: |
            ## What's Changed

            Auto-generated release notes from commits.

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.previous_version }}...${{ steps.version.outputs.version_tag }}

      - name: Deploy to GitHub Pages
        if: steps.version.outputs.changed == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
